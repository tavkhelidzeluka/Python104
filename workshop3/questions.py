"""
N1 - Filtering

მეგობარმა გთხოვათ, რომ მოცემული სიიდან გაცხრილოთ ისეთი ადამიანების სახელები, რომელბიც მთავრდება 
'ი'-ზე და იწყება ან 'მ'-ზე ან 'ნ'-ზე.

"""

friend_list: list[str] = [
    'ნინი', 'მარი', 'ნიკა', 'გიორგი', 'ლევანი'
]

# friend_list.pop(0)
# friend_list.pop(0)

# print(friend_list)

# ----------------------------------------------------------------------------------------------------

"""
N2 - Filling Missing Pieces

მოცემულია ლისტი, სადაც წერია მთელი რიხცვები, დაალაგეთ ეს ლისტი და შეავსეთ გამოტოვებული რიცხვები, 
ისე, რომ მიიღოთ თანმიმდევრობა, რომელიც ყოველ ნაბიჯზე 1-ით იზრდება

მაგ.
თუ მოცემულია: [3, 1, 5]
უნდა მივიღოთ: [1, 2, 3, 4, 5]

თუ მოცემულია: [11, 12, 8]
უნდა მივიღოთ: [8, 9, 10, 11, 12]

"""

numbers_list: list[int] = [27, 19, 20, 25, 21, 23, 24]

# numbers_list.append(22)
# numbers_list.append(26)

numbers_list.sort()
# ჩაამატე 22 -ი 3 ინდექზე
numbers_list.insert(4, 22)
# 3 -ე ინექსზე მდგომი ელემენტს მიანიჭე 22
# numbers_list[3] = 22
numbers_list.insert(-1, 26)

print(numbers_list)

# ----------------------------------------------------------------------------------------------------

"""
N3 - Big Data

შექმენით ლისტი სადაც იქნება 1 დან 1,000,000 -ს ჩათვლით მთელი რიცხვები.
შემდეგ დაბეჭდეთ ეკრანზე

"""

# ----------------------------------------------------------------------------------------------------


"""
N4 - Working with Big Data

შექმენით მილიონ ელემენიანი ლისტი და დათვალეთ მათი ჯამი.
შემდეგ გამოიყენეთ sum ფუნქცია და შეადარეთ შესრულების დროები

"""

# ----------------------------------------------------------------------------------------------------

"""
N5 - Cube Comprehension

გენერატორის გამოყენებით დააგენერირეთ ლისტი სადაც იქნება 1-10 მდე 
მთელი რიცხვების კუბები

"""